def solution(lines):
    # 선분 중에 제일 작은 값과 제일 큰 값을 구하면 세 선분의 전체 길이가 나온다.
    # 전체 길이만큼의 0으로 차있는 배열을 만들고 거기에 선분을 하나씩 대입하면서 만약 선분이 있다면 숫자를 +1 해주고
    # 배열의 값이 2 이상인 값들만 반환하면 되지 않을까?
    
    첫번째_선분 = lines[0]
    두번째_선분 = lines[1]
    세번째_선분 = lines[2]
    answer = 0
  #  큰_틀 = range(min(첫번째_선분[0], 두번째_선분[0], 세번째_선분[0]),max(첫번째_선분[1], 두번째_선분[1], 세번째_선분[1]) + 1)
 #   answer = [0] * len(큰_틀)
    
#     for i in range(len(lines)):
#         for j in range(0,2):
#             print(lines[i][j])
            
    #선분의 시작 좌표와 끝 좌표 값 사이에 다른 선분의 시작 좌표가 있다면 두 선분은 겹친다.
    #1선분의 끝 좌표 값과 2선분의 시작 좌표 값을 빼면, 겹치는 부분의 길이를 구할 수 있다.
    #아닌가?
    
    if 첫번째_선분[0] < 두번째_선분[0] and 첫번째_선분[1] > 두번째_선분[0]:
        answer += 첫번째_선분[1] - 두번째_선분[0]
    
    if 첫번째_선분[0] < 세번째_선분[0] and 첫번째_선분[1] > 세번째_선분[0]:
        answer += 첫번째_선분[1] - 세번째_선분[0]
    
    if 두번째_선분[0] < 세번째_선분[0] and 두번째_선분[1] > 세번째_선분[0]:
        answer += 두번째_선분[1] - 세번째_선분[0]   
    # 마찬가지로 선분의 시작 좌표와 끝 좌표 값 사이에 다른 선분의 끝 좌표가 있다면 두 선분은 겹친다.
    # 1선분의 끝 좌표 값과 2선분의 시작 좌표 값을 빼면, 겹치는 부분의 길이를 구할 수 있다.
    
   # if 첫번째_선분[0] < 두번째_선분[1] and 첫번째_선분[1] > 두번째_선분[1]:
   #     answer += 첫번째_선분[1] - 두번째_선분[1]
    
   # if 첫번째_선분[0] < 세번째_선분[1] and 첫번째_선분[1] > 세번째_선분[1]:
  #      answer += 첫번째_선분[1] - 세번째_선분[1]
    
   # if 두번째_선분[0] < 세번째_선분[1] and 두번째_선분[1] > 세번째_선분[1]:
   #     answer += 두번째_선분[1] - 세번째_선분[1]
        
    return answer
