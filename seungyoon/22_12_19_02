def solution(denum1, num1, denum2, num2):
    # 각 분수를 더하고 최대공약수로 나누기
    answer = [0] * 2
    answer[0] = (denum1 * num2) + (denum2 * num1)
    answer[1] = num1*num2
    
    # 유클리드 호제법
    # 2개의 자연수 a, b(a > b)에 대해서 a를 b로 나눈 나머지가 r일 때, a와 b의 최대공약수는 b와 r의 최대공약수와 같다.
    # 나머지가 0이 나오는 수가 최대공약수이다.
    def gcd(a, b):
        while b > 0:
            a, b = b, a % b # a는 b, b는 나머지
        return a

    if answer[0] > answer[1]:
        a = answer[0]
        b = answer[1]
        최대공약수 = gcd(a, b)
    elif answer[0] < answer[1]:
        a = answer[1]
        b = answer[0]
        최대공약수 = gcd(a, b)
    else: 
        answer[0] = answer[0] // answer[0]
        answer[1] = answer[1] // answer[1]
        return answer
    
    answer[0] = answer[0] // 최대공약수
    answer[1] = answer[1] // 최대공약수
    
    return answer

#     # a와 b의 최소공배수는 a와 b의 곱을 a와 b의 최대공약수를 나눈 것과 같다.
#     최소공배수 = (num1 * num2) / 최대공약수

#     answer[0] = (denum1 * (최소공배수 / num1)) + (denum2 * (최소공배수 / num2))
#     answer[1] = 최소공배수
